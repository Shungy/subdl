#!/bin/sh

usage="usage: ${0##*/} [-e episode] [-i imdbid] [-s season] [-l sublanguageid] [-r results] [-c (no cut)] [-n (non-interactive)] [query]"
tmpfile=$(mktemp /tmp/subdl-XXXXXX)

trap 'rm "$tmpfile"' 0 1 15

url_encode() {
	# Query must be URL encoded
	printf "%s" "$1" | tr '[:upper:]' '[:lower:]' | \
		printf "%%%s" $(od -v -t x1 -An -) # Do NOT quote!
}

check_num() {
	echo "$1" | grep '^[0-9]\+$' > /dev/null || {
		echo Season, episode, and results must be natural numbers.
		exit 1
	}
}

check_lang() {
	echo "$1" | grep '^[a-z]\{3\}\(,[a-z]\{3\}\)*$' > /dev/null || {
		echo Language code must be 3 letters.
		echo Multiple languages must be separated with a comma.
		exit 1
	}
}

check_imdbid() {
	echo "$1" | grep '^[0-9]\{7\}$' > /dev/null || {
		echo Imdbid must be 7 figures.
		echo Imdbid must exclude property prefix.
		exit 1
	}
}

check_args() {
	# Either a query or imdbid must exist.
	[ -z "$1" ] && [ -z "$imdbid" ] && {
		echo "$usage"
		exit 1
	}
}

set_query() {
	# Strip the location prefix if the query is a file.
	if [ -f "$1" ]
	then
		query=$(url_encode "${1##*/}")
	elif [ -n "$1" ]
	then
		query=$(url_encode "$*")
	fi
}

define_address() {
	printf 'http://rest.opensubtitles.org/search%s%s%s%s%s'    \
	       "${episode:+/episode-}"                             \
	       "${imdbid:+/imdbid-}${imdbid}"                      \
	       "${query:+/query-}${query}"                         \
	       "${season:+/season-}${season}"                      \
	       "${sublanguageid:+/sublanguageid-}${sublanguageid}"
}

while getopts r:cne:i:s:l: opt
do
	case $opt in
		r)
			check_num "$OPTARG"
			rows="$OPTARG"
			;;
		c)
			cols="0"
			;;
		n)
			dontask="1"
			;;
		e)
			check_num "$OPTARG"
			episode="$OPTARG"
			;;
		i)
			check_imdbid "$OPTARG"
			imdbid="$OPTARG"
			;;
		s)
			check_num "$OPTARG"
			season="$OPTARG"
			;;
		l)
			check_lang "$OPTARG"
			sublanguageid="$OPTARG"
			;;
		\?)
			echo "$usage"
			exit
			;;
	esac
done
shift $(( OPTIND - 1 ))

check_args
set_query


[ -z "$rows" ] && {
	rows=$(( $(tput lines) - 2 ))
	[ "$rows" -lt 4 ] && rows=4
}

[ -z "$cols" ] && cols=$(tput cols)

curl -s -S -A 'TemporaryUserAgent' "$(define_address)" > "$tmpfile"

[ -z "$dontask" ] && {
	jq -e -j --argjson rows "$rows" --argjson cols "$cols" '
	if $rows != 0
	then
		del(.[$rows:])
	else
		.
	end |
	if length == 0
	then
		"no result.\n" | halt_error(1)
	else
		[[range(length) | tostring] , [.[].SubFileName]] |
		transpose | .[] | " " +  .[0] + ": " + .[1] |
		if $cols != 0
		then
			.[:$cols] | . + "\n"
		else
			. + "\n"
		end
	end' "$tmpfile" || {
		cat "$tmpfile"
		printf "\n"
		exit 1
	}

	printf "Subtitle number: "
	read -r nu
}

if [ -z "$nu" ]
then
	nu=0
else
	check_num "$nu"
fi

dlurl=$(jq -j --argjson nu "$nu" '.[$nu].SubDownloadLink' "$tmpfile")
filename=$(jq -j --argjson nu "$nu" '.[$nu].SubFileName' "$tmpfile")

curl -s -S "$dlurl" | gzip -d > "$filename" && echo Fetched "$filename"
